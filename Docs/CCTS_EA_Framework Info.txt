EA Specific Files. The following 3 files are used by the current EA.
MQL4\Experts\CCTS_Breakout.mq4:	 		   Main EA file.
MQL4\Include\CCTS\EaSetup\Breakout_Setup.mqh:      File for input variables specific to this EA.   
MQL4\Include\CCTS\EaSetup\Breakout_Signals.mqh:    File for signals. void signals() Returns a tradeSignalLong  = 1 or tradeSignalShort = 1  to the main EA to open trades.

EA Global Files. The following files are used by other EA's
MQL4\Include\CCTS\CCTS_Config.mqh:	 	   File for storing variables and global inputs that other EA's use. I have multiple EA's that share these files, only the main EA.mq4, _Setup.mqh and Signals.mqh are modified per EA. 
MQL4\Include\CCTS\CCTS_BaseIncludes.mqh:   	   File storing all the include files in a centralised file.
MQL4\Include\CCTS\CCTS_AutoLots.mqh:	 	   File for calculating and normalizing lot sizes based on  SendLots = riskAmount / (StopLossPips * tickValue). Functions in the file are double NormalizeLot() and double CalcLotsVolume().
MQL4\Include\CCTS\CCTS_AutoMagic.mqh:	 	   File for creating magic numbers based on the symbol name. Function in file int AutoMagic().
MQL4\Include\CCTS\CCTS_CalculateDigitsPoints.mqh:  File for calculating, retrieving symbol points, pips digits, etc. Functions int GetDigits(), double GetPoint(), double GetPip(), double PointValue().
MQL4\Include\CCTS\CCTS_CalculateSlippage.mqh:	   File for calculating slippage. Function int calculateSlippage().
MQL4\Include\CCTS\CCTS_CalculateSLTP.mqh:	   File for calculating standard stop loss and take profit. Function bool CalculateStandardSLTP().
MQL4\Include\CCTS\CCTS_CloseTrades.mqh:		   File for closing trades if used by EA. Functions void CloseAllCustom(), void CloseAllC1((), void CloseAllBL2(, void CloseAllEx1(), void CloseAllEx2().
MQL4\Include\CCTS\CCTS_CountOrders.mqh:		   File for counting number of trades for current EA. Function int MyOpenOrders().
MQL4\Include\CCTS\CCTS_LogActions.mqh:		   File for EA actions such as openging orders, closing orders, trailing stop adjustment, etc. Function void LogAction().
MQL4\Include\CCTS\CCTS_LogErrors.mqh:		   File for logging errors. Function void ErrorLog().	
MQL4\Include\CCTS\CCTS_LogTrades.mqh:		   File for logging trade outcomes for journaling. Function void LogTrade().
MQL4\Include\CCTS\CCTS_MoneyManagement.mqh:	   File for breakeven code, and trailing stop code. Functions bool MoveToBreakEven(), void UpdateTrailingStopSimple(), void UpdateTrailingStopATR(), void UpdateTrailingStop().
MQL4\Include\CCTS\CCTS_NewBar.mqh:		   File for new bar calculation. Functions bool NewBar() for standard new bar. bool AfterNewBar() where there is a delay after a new bar for signals, openeing orders, etc.
MQL4\Include\CCTS\CCTS_OrderOpen.mqh:	           File for opening trades. openTrades() -> openFirstOrder() and openSecondOrder() received for main EA file. Functions bool openFirstOrder() and bool openSecondOrder().
MQL4\Include\CCTS\CCTS_PersistentVariables.mqh:    File for storing persitant variables. Used on restart of EA after shut down, etc. Functions void CreateFileIfMissing(), void WriteToFile(), void ReadFromFile().
MQL4\Include\CCTS\CCTS_TimeUtils.mqh:		   File for normalising time, getting broker time, calculating time zones, etc. Used for trading session and such. Functions int  GetBrokerUTCOffsetSeconds(), datetime BrokerTimeToUTC(), datetime UTCToTargetZone(), datetime NormalizeTime(),  int GetNormalizedHour(), int GetNormalizedDayOfWeek(), and bool IsWithinSession().


Bot info
2 orders open at the same time upon openTrades signal
Take profit only set for 1st order. 2nd order will be allowed to run if take profit hit.
Stop loss set for both orders.


Money Management
Take profit: 1 x atr.
Stop loss:  1.5 x atr.
Breakeven: When first trade hits take profit, the stop loss is moved to breakeven for the running trade. Only when there is one trade open.
Trailing stop loss: Starts when the price has moved 2 x atr into profit trailing stop will be 2 x atr. Trailing stop only when 1st trade is closed.
Lot size: Calculated on the stoploss and risk of 1 percent of account balance. That is 1% per order, so that will be 2% total.

Future additions to bot:
Exit indicator to exit if price goes against trade instead of hitting stop loss.

Time frames:
H4 or D1. 

Symbols:
EA will be used on major and minor forex, indices, commodities and crypto.

Signals:
Breakout_Signals.mqh:
//+------------------------------------------------------------------+
//| Breakout_Signals.mqh                                             |
//+------------------------------------------------------------------+
#ifndef __Breakout_SIGNALS_MQH__
#define __Breakout_SIGNALS_MQH__

#include <CCTS\CCTS_Config.mqh>
#include <CCTS\EaSetup\Breakout_Setup.mqh>

void signals(
   int &tradeSignalLong,
   int &tradeSignalShort,
   int &exitSignalLong,
   int &exitSignalShort)
{
   // initialize
   tradeSignalLong  = 0;
   tradeSignalShort = 0;
   exitSignalLong   = 0;
   exitSignalShort  = 0;

   // need enough bars
   if(Bars < RangeEnd + 2) 
      return;

   //--- primary values on the last closed bar
   double signalValue   = Close[1];               // “gold line”
   double longTermValue = Close[1 + CompareBarsAgo]; 

   //--- compute highest/lowest CLOSE over our look-back range
   double highestClose = Close[RangeStart];
   double lowestClose  = Close[RangeStart];
   for(int i = RangeStart+1; i <= RangeEnd; i++)
   {
      double c = Close[i];
      if(c > highestClose) highestClose = c;
      if(c < lowestClose)  lowestClose  = c;
   }

   //--- entry signals
   bool longCond  = (signalValue > longTermValue &&
                     signalValue > highestClose &&
                     signalValue > lowestClose);
   bool shortCond = (signalValue < longTermValue &&
                     signalValue < highestClose &&
                     signalValue < lowestClose);

   if(longCond)  tradeSignalLong  = 1;
   if(shortCond) tradeSignalShort = 1;

   //--- exit logic: find the last entry in the past 10 bars
   int lastDir = 0; // +1=long, -1=short
   for(int i = 2; i <= 11; i++) // bars 2..11 correspond to the last 10 closed bars
   {
      double sv   = Close[i];
      double ltv  = Close[i + CompareBarsAgo - 1]; // align the longTermValue shift
      double hi   = Close[i + RangeStart - 1];
      double lo   = hi;
      for(int j = RangeStart; j <= RangeEnd; j++)
      {
         double cc = Close[i + j - 1];
         if(cc > hi) hi = cc;
         if(cc < lo) lo = cc;
      }
      if(sv > ltv && sv > hi && sv > lo) { lastDir = +1; break; }
      if(sv < ltv && sv < hi && sv < lo) { lastDir = -1; break; }
   }

   //--- exit on the current bar if it reverses the same three tests
   if(lastDir == +1
      && signalValue < longTermValue
      && signalValue < highestClose
      && signalValue < lowestClose)
      exitSignalLong = 1;

   if(lastDir == -1
      && signalValue > longTermValue
      && signalValue > highestClose
      && signalValue > lowestClose)
      exitSignalShort = 1;
}

#endif
//+------------------------------------------------------------------+
Inputs:
Breakout_Setup.mqh:
//+------------------------------------------------------------------+
//|                                               Breakout_Setup.mqh |
//|                                                      Cool Cherry |
//|                                       https://www.CoolCherry.com |
//+------------------------------------------------------------------+
#property copyright "Cool Cherry"
#property link      "https://www.CoolCherry.com"
#property strict

#ifndef __Breakout_SETUP_MQH__
#define __Breakout_SETUP_MQH__

extern string  SessionHeader          = "-------------------------- Session Selection --------------------------";
input bool     EnableAsianSession     = false;
input bool     EnableLondonSession    = true;
input bool     EnableNewYorkSession   = true;

extern string  DayHeader              = "-------------------------- Day of Week Filter Selection --------------------------";
input bool     AllowSunday            = false;
input bool     AllowMonday            = true;
input bool     AllowTuesday           = true;
input bool     AllowWednesday         = true;
input bool     AllowThursday          = true;
input bool     AllowFriday            = true;
input bool     AllowSaturday          = false;

extern string  IndicatorEnableHeader  = "-------------------------- Enable/Disable Indicaotrs --------------------------";
input  bool    EnableBL2              = false;
input bool     EnableC1               = false;
input bool     EnableC2               = false;
input bool     EnableV1               = false;
input bool     EnableEx1              = false;
input bool     EnableEx2              = false;

extern string  EntrySelectHeader      = "-------------------------- Enable/Disable BL2, C1 Entry Type & Exit --------------------------";
input bool     UseCustomEntries       = true;
input bool     UseC1Entries           = false;
input bool     UseBL2Entries          = false;
input bool     UseATRFilter           = false;
input bool     UseCustomExits         = false;
input bool     UseC1AsExit            = false;
input bool     UseBL2AsExit           = false;

extern string  BarBreakout            = "-------------------------- Bar Breakout Inputs --------------------------";
input int      CompareBarsAgo         = 200;    // Bar index for the reference close (e.g., 200 bars ago)
input int      RangeStart             = 2;      // Starting index for the range (e.g., candle 2)
input int      RangeEnd               = 10;     // Ending index for the range (e.g., candle 10)

#endif
//+------------------------------------------------------------------+
CCTS_Config.mqh:
//+------------------------------------------------------------------+
//|                                                  CCTS_Config.mqh |
//|                                                      Cool Cherry |
//|                                       https://www.CoolCherry.com |
//+------------------------------------------------------------------+
#property copyright "Cool Cherry"
#property link      "https://www.CoolCherry.com"
#property strict

#ifndef __CCTS_CONFIG_MQH__
#define __CCTS_CONFIG_MQH__

extern string RiskHeader              = "-------------------------- Risk Setting Input --------------------------";
input double  RiskPercent             = 1.0;         // Percentage of account balnce to risk

extern string TpSlHeader              = "-------------------------- TP & SL Settings --------------------------";
input double  ATR_SL_Multiplier       = 1.5;         // Stoploss ATR multiplier
input double  ATR_TP_Multiplier       = 1.0;         // Take profit ATR multiplier
input double  ATR_TP_Multiplier_2     = 4.0;         // 2nd trade ATR mulltiplier if enabled

extern string TSLHeader               = "-------------------------- Trailing Stoploss Settings --------------------------";
input double  ATR_TrailingStart       = 2.5;         // ATR multiplier for when to initiate trailing stop
input double  ATR_TrailingMultiplier  = 2.0;         // ATR multiplier for trailing stoploss

extern string TradeControlHeader      = "-------------------------- Trade Control Settings--------------------------";
input bool    UseTrailingStop         = true;        // Enable/Disable trailing stop
input bool    UseBreakeven            = true;        // Enable/Disable breakeven code
input bool    Use_Tp_2                = false;       // Enable/Disable 2nd take profit or let second trade run

extern string DispPanleHeader         = "-------------------------- Display Panel Settings--------------------------";
input bool    EnablePrintLogs         = true;        // Enable/Disable logs
input bool    ShowDisplayPanel        = true;        // Enable/Diable display panel

